<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Ora Editor - Home</title>
  <link rel="stylesheet" href="style.css">
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <!-- Header with Logo and Storage Icon -->
  <header class="header">
    <div class="logo">
      <i class="fas fa-code"></i> Ora Editor
    </div>
    <div class="storage-icon" id="storageIcon" title="Storage Usage">
      <i class="fas fa-database"></i>
    </div>
  </header>

  <!-- Main Content -->
  <main class="main-content">
    <!-- When user clicks New File, the create file modal will appear -->
    <button class="new-file-btn" onclick="showCreateFileModal()">+ New File</button>
    
    <!-- Recents Section -->
    <section class="recents">
      <h2>Recent Projects</h2>
      <ul id="recent-list">
        <!-- Recent files will be added here dynamically -->
      </ul>
    </section>
  </main>

 <!-- Create File Modal (for new file creation) -->
  <div id="createFileModal" class="modal1">
    <div class="modal-content1">
      <h3>Create New File</h3>
      <input type="text" id="newFileName" placeholder="Enter file name" />
      <div class="modal-buttons">
        <button id="createFileCancelBtn">Cancel</button>
        <button id="createFileContinueBtn">Continue</button>
      </div>
    </div>
  </div>

  <!-- Storage Modal -->
  <div id="storageModal" class="modal">
    <div class="modal-content">
      <span class="close" id="storageModalClose">&times;</span>
      <h2>Storage Usage</h2>
      <div class="progress-bar-container">
        <div class="progress-bar" id="progressBar"></div>
      </div>
      <p id="storageText"></p>
      <button id="clearStorageBtn" class="clear-storage-btn">
        <i class="fas fa-trash"></i> Clear Storage
      </button>
    </div>
  </div>

  <!-- Share Modal (Fallback for Web Share API) -->
  <div id="shareModal" class="modal" style="display:none;">
    <div class="share-modal-content">
      <span class="share-modal-close">&times;</span>
      <h3>Share This File</h3>
      <div class="share-icons">
        <a href="#" id="shareFacebook" target="_blank" title="Share on Facebook">
          <i class="fab fa-facebook-f"></i>
        </a>
        <a href="#" id="shareTwitter" target="_blank" title="Share on Twitter">
          <i class="fab fa-twitter"></i>
        </a>
        <a href="#" id="shareLinkedIn" target="_blank" title="Share on LinkedIn">
          <i class="fab fa-linkedin-in"></i>
        </a>
        <a href="#" id="shareEmail" title="Share via Email">
          <i class="fas fa-envelope"></i>
        </a>
      </div>
    </div>
  </div>
<script src=""></script>
  <script>
    /* ========= IndexedDB Setup ========= */
    function openDatabase() {
      return new Promise((resolve, reject) => {
        const request = indexedDB.open("OraEditorDB", 1);
        request.onupgradeneeded = function(event) {
          const db = event.target.result;
          if (!db.objectStoreNames.contains("files")) {
            db.createObjectStore("files", { keyPath: "id" });
          }
        };
        request.onsuccess = function(event) {
          resolve(event.target.result);
        };
        request.onerror = function(event) {
          reject("Database error: " + event.target.errorCode);
        };
      });
    }

    async function loadFiles() {
      const db = await openDatabase();
      return new Promise((resolve, reject) => {
        const transaction = db.transaction("files", "readonly");
        const store = transaction.objectStore("files");
        const request = store.getAll();
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
      });
    }

    async function saveFile(file) {
      const db = await openDatabase();
      return new Promise((resolve, reject) => {
        const transaction = db.transaction("files", "readwrite");
        const store = transaction.objectStore("files");
        const request = store.add(file);
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
      });
    }

    async function updateFile(file) {
      const db = await openDatabase();
      return new Promise((resolve, reject) => {
        const transaction = db.transaction("files", "readwrite");
        const store = transaction.objectStore("files");
        const request = store.put(file);
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
      });
    }

    async function deleteFileIndexedDB(fileId) {
      const db = await openDatabase();
      return new Promise((resolve, reject) => {
        const transaction = db.transaction("files", "readwrite");
        const store = transaction.objectStore("files");
        const request = store.delete(fileId);
        request.onsuccess = () => resolve();
        request.onerror = () => reject(request.error);
      });
    }
    
    
        //create new file
    /* IndexedDB: loadFiles, saveFile, etc. remain the same */

async function createNewFileWithName(name) {
  const newFile = {
    id: Date.now().toString(),
    name: name,
    content: "",
    date: new Date().toISOString(),
    size: 0
  };

  try {
    // Wait for the array from IndexedDB
    let files = await loadFiles();
    files.push(newFile);
    // Also add the new file to IndexedDB
    await saveFile(newFile);
    // Optionally update localStorage "projects" or handle it in recents
    // localStorage.setItem("projects", JSON.stringify(files));
    // Set the current file for the editor
    localStorage.setItem("currentFile", newFile.id);
    window.location.href = "editor.html";
  } catch (err) {
    console.error("Error creating file:", err);
  }
}
// In your modal's continue button click handler:
document.getElementById("createFileContinueBtn").addEventListener("click", async function() {
  const fileName = document.getElementById("newFileName").value.trim();
  if (fileName) {
    await createNewFileWithName(fileName);
  } else {
    alert("Please enter a file name.");
  }
});

    async function deleteFile(fileId) {
  if (confirm("Are you sure you want to delete this file?")) {
    try {
      let files = await loadFiles(); // wait for files to load
      files = files.filter(f => f.id !== fileId);
      await saveFiles(files); // ensure the updated array is saved
      renderRecents();
      updateStorageInfo();
    } catch (err) {
      console.error(err);
    }
  }
}

    /* ========= Projects & Recents ========= */
    // For compatibility, we still keep a "projects" array in localStorage that holds metadata.
    const PROJECTS_KEY = "projects";
    function loadProjects() {
      return JSON.parse(localStorage.getItem(PROJECTS_KEY) || "[]");
    }
    function saveProjects(projects) {
      localStorage.setItem(PROJECTS_KEY, JSON.stringify(projects));
    }
    /* ========= Render Recent Files ========= */
    async function renderRecents() {
      const recentList = document.getElementById("recent-list");
      try {
        const files = await loadFiles();
        // Update localStorage projects for recents based on IndexedDB files
        saveProjects(files);
        recentList.innerHTML = "";
        if (files.length === 0) {
          recentList.innerHTML = "<li>No recent files found.</li>";
        } else {
          files.sort((a, b) => new Date(b.date) - new Date(a.date));
          files.forEach(file => {
            const li = document.createElement("li");
            li.className = "recent-item";
            li.innerHTML = `
              <div class="file-info">
                <span class="file-name">${file.name}</span>
                <span class="file-date">${new Date(file.date).toLocaleString()}</span>
              </div>
              <div class="file-actions">
                <i class="fas fa-edit" title="Edit" onclick="editFile('${file.id}')"></i>
                <i class="fas fa-pen-square" title="Rename" onclick="renameFile('${file.id}')"></i>
                <i class="fas fa-share-alt" title="Share" onclick="shareFile('${file.id}')"></i>
                <i class="fas fa-trash-alt" title="Delete" onclick="deleteFile('${file.id}')"></i>
              </div>
            `;
            recentList.appendChild(li);
          });
        }
      } catch (err) {
        console.error(err);
      }
    }

    function editFile(fileId) {
      localStorage.setItem("currentFile", fileId);
      window.location.href = "editor.html";
    }

    async function renameFile(fileId) {
      try {
        const files = await loadFiles();
        const file = files.find(f => f.id === fileId);
        if (file) {
          const newName = prompt("Enter new name for the file:", file.name);
          if (newName) {
            file.name = newName;
            file.date = new Date().toISOString();
            await updateFile(file);
            renderRecents();
          }
        }
      } catch (err) {
        console.error(err);
      }
    }

    async function deleteFile(fileId) {
      if (confirm("Are you sure you want to delete this file?")) {
        try {
          await deleteFileIndexedDB(fileId);
          renderRecents();
          updateStorageInfo();
        } catch (err) {
          console.error(err);
        }
      }
    }

    /* ========= Share Functionality ========= */
    function shareFile(fileId) {
      const shareLink = window.location.origin + "/editor.html?file=" + encodeURIComponent(fileId);
      if (navigator.share) {
        navigator.share({
          title: "Ora Editor File",
          text: "Check out this file on Ora Editor!",
          url: shareLink
        })
        .then(() => console.log("File shared successfully"))
        .catch(error => console.error("Error sharing:", error));
      } else {
        showShareModal(shareLink);
      }
    }
    function showShareModal(link) {
      let modal = document.getElementById("shareModal");
      if (!modal) {
        modal = document.createElement("div");
        modal.className = "share-modal";
        modal.innerHTML = `
          <div class="share-modal-content">
            <span class="share-modal-close">&times;</span>
            <h3>Share This File</h3>
            <div class="share-icons">
              <a href="https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(link)}" target="_blank" title="Facebook">
                <i class="fab fa-facebook-f"></i>
              </a>
              <a href="https://twitter.com/intent/tweet?url=${encodeURIComponent(link)}&text=Check out this file on Ora Editor!" target="_blank" title="Twitter">
                <i class="fab fa-twitter"></i>
              </a>
              <a href="https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(link)}" target="_blank" title="LinkedIn">
                <i class="fab fa-linkedin-in"></i>
              </a>
              <a href="mailto:?subject=Check out this file&body=${encodeURIComponent(link)}" title="Email">
                <i class="fas fa-envelope"></i>
              </a>
            </div>
          </div>
        `;
        document.body.appendChild(modal);
        modal.querySelector(".share-modal-close").addEventListener("click", function() {
          modal.style.display = "none";
        });
        modal.addEventListener("click", function(e) {
          if (e.target === modal) modal.style.display = "none";
        });
      }
      modal.style.display = "flex";
    }

    /* ========= Storage Modal Functions ========= */
    const TOTAL_STORAGE_MB = 500;
    // For storage usage, we calculate total size of all files in IndexedDB
    async function updateStorageInfo() {
      try {
        const files = await loadFiles();
        let totalSizeBytes = 0;
        files.forEach(file => {
          totalSizeBytes += new Blob([JSON.stringify(file)]).size;
        });
        const usedMB = (totalSizeBytes / (1024 * 1024)).toFixed(2);
        const percentage = Math.min((totalSizeBytes / (TOTAL_STORAGE_MB * 1024 * 1024)) * 100, 100);
        document.getElementById("progressBar").style.width = percentage + "%";
        document.getElementById("storageText").innerText = `${usedMB} MB / ${TOTAL_STORAGE_MB} MB`;
      } catch (err) {
        console.error(err);
      }
    }
    async function clearStorage() {
      if (confirm("This will delete all saved files and app data. Are you sure?")) {
        try {
          const db = await openDatabase();
          const transaction = db.transaction("files", "readwrite");
          const store = transaction.objectStore("files");
          store.clear();
          transaction.oncomplete = () => {
            renderRecents();
            updateStorageInfo();
            alert("Storage cleared successfully!");
          };
          transaction.onerror = () => console.error("Error clearing storage");
        } catch (err) {
          console.error(err);
        }
      }
    }
    document.getElementById("storageIcon").addEventListener("click", () => {
      updateStorageInfo();
      document.getElementById("storageModal").style.display = "block";
    });
    document.getElementById("storageModalClose").addEventListener("click", () => {
      document.getElementById("storageModal").style.display = "none";
    });
    document.getElementById("clearStorageBtn").addEventListener("click", clearStorage);
    window.onclick = function(event) {
      const modal = document.getElementById("storageModal");
      if (event.target == modal) {
        modal.style.display = "none";
      }
    };

    /* ========= Create File Modal Functions ========= */
    function showCreateFileModal() {
      document.getElementById("createFileModal").style.display = "block";
    }
    document.getElementById("createFileCancelBtn").addEventListener("click", function() {
      document.getElementById("createFileModal").style.display = "none";
    });
    document.getElementById("createFileContinueBtn").addEventListener("click", function() {
      const fileName = document.getElementById("newFileName").value.trim();
      if (fileName) {
        createNewFileWithName(fileName);
      } else {
      }
    });
    window.addEventListener("click", function(event) {
      const modal = document.getElementById("createFileModal");
      if (event.target == modal) {
        modal.style.display = "none";
      }
    });

    // Update storage info periodically
    setInterval(updateStorageInfo, 2000);
    // Also render recents on DOMContentLoaded
    document.addEventListener("DOMContentLoaded", renderRecents);
  </script>
</body>
</html>